{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "skuName": {
            "type": "string",
            "defaultValue": "F1",
            "allowedValues": [
                "F1",
                "D1",
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P4"
            ],
            "metadata": {
                "description": "Describes plan's pricing tier and instance size. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
            }
        },
        "skuCapacity": {
            "type": "int",
            "allowedValues": [
                1,
                2,
                4
            ],
            "defaultValue": 1,
            "minValue": 1,
            "metadata": {
                "description": "Describes plan's instance count"
            }
        },
        "sqlserverName": {
            "defaultValue": "[concat('openhacksql', parameters('suffix'))]",
            "type": "string",
            "metadata": {
                "description": "The name of the SQL Server"
            }
        },
        "sqlAdministratorLogin": {
            "type": "string",
            "defaultValue": "openhackadmin",
            "metadata": {
                "description": "The admin user of the SQL Server"
            }
        },
        "sqlAdministratorLoginPassword": {
            "type": "securestring",
            "defaultValue": "Password123",
            "metadata": {
                "description": "The password of the admin user of the SQL Server"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources in the first location."
            }
        },
        "secondLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources in the second location."
            }
        },
        "secondResourceGroup": {
            "type": "string",
            "defaultValue": "openhack2"
        },
        "suffix": {
            "defaultValue": "[concat('suf1', uniqueString(resourceGroup().id))]",
            "type": "string",
            "metadata": {
                "description": "Unique suffix to append to all resource names in the first resource group."
            }
        },
        "suffix2": {
            "defaultValue": "[concat('suf2', uniqueString(resourceGroup().id))]",
            "type": "string",
            "metadata": {
                "description": "Unique suffix to append to all resource names in the second resource group."
            }
        },
        "eventhubSku": {
            "type": "string",
            "allowedValues": [
                "Basic",
                "Standard"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "The messaging tier for service Bus namespace"
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "telemetry",
            "metadata": {
                "description": "Name of Event Hub"
            }
        },
        "consumerGroupName": {
            "type": "string",
            "defaultValue": "$Default",
            "metadata": {
                "description": "Name of Consumer Group"
            }
        },
        "repoURL": {
            "type": "string",
            "defaultValue": "https://github.com/solliancenet/nosql-openhack.git",
            "metadata": {
                "description": "The URL for the GitHub repository that contains the project to deploy."
            }
        },
        "branch": {
            "type": "string",
            "defaultValue": "master",
            "metadata": {
                "description": "The branch of the GitHub repository to use."
            }
        }
    },
    "variables": {
        "name-suffix": "[parameters('suffix')]",
        "name2-suffix": "[parameters('suffix2')]",
        "hostingPlanName": "[concat('openhackplan-', variables('name-suffix'))]",
        "webSiteName": "[concat('openhackweb-', variables('name-suffix'))]",
        "sqlserverName": "[parameters('sqlserverName')]",
        "namespaceName": "[concat('openhackhub-', variables('name-suffix'))]",
        "namespace2Name": "[concat('openhackhub-', variables('name2-suffix'))]",
        "databaseName": "Movies",
        "defaultSASKeyName": "RootManageSharedAccessKey",
        "authRuleResourceId": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', variables('namespaceName'), variables('defaultSASKeyName'))]",
        "authRule2ResourceId": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', variables('namespace2Name'), variables('defaultSASKeyName'))]"
    },
    "resources": [
        {
            "apiVersion": "2017-05-10",
            "name": "nestedTemplate",
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[parameters('secondResourceGroup')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "apiVersion": "2017-04-01",
                            "name": "[variables('namespace2Name')]",
                            "type": "Microsoft.EventHub/namespaces",
                            "location": "[parameters('secondLocation')]",
                            "sku": {
                                "name": "[parameters('eventhubSku')]",
                                "tier": "[parameters('eventhubSku')]",
                                "capacity": "[parameters('skuCapacity')]"
                            },
                            "tags": {
                                "tag1": "value1",
                                "tag2": "value2"
                            },
                            "properties": {
                                "zoneRedundant": false,
                                "isAutoInflateEnabled": true,
                                "maximumThroughputUnits": 2,
                                "kafkaEnabled": false
                            },
                            "resources": [
                                {
                                    "apiVersion": "2017-04-01",
                                    "name": "[parameters('eventHubName')]",
                                    "type": "eventhubs",
                                    "dependsOn": [
                                        "[concat('Microsoft.EventHub/namespaces/', variables('namespace2Name'))]"
                                    ],
                                    "properties": {
                                        "messageRetentionInDays": 4,
                                        "partitionCount": 2,
                                        "status": "Active"
                                    },
                                    "resources": [
                                        {
                                            "apiVersion": "2017-04-01",
                                            "name": "[parameters('consumerGroupName')]",
                                            "type": "consumergroups",
                                            "dependsOn": [
                                                "[parameters('eventHubName')]"
                                            ],
                                            "properties": {
                                                "userMetadata": "User Metadata goes here"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "parameters": {}
            }
        },
        {
            "name": "[variables('sqlserverName')]",
            "type": "Microsoft.Sql/servers",
            "location": "[parameters('location')]",
            "tags": {
                "displayName": "SqlServer"
            },
            "apiVersion": "2014-04-01",
            "properties": {
                "administratorLogin": "[parameters('sqlAdministratorLogin')]",
                "administratorLoginPassword": "[parameters('sqlAdministratorLoginPassword')]",
                "version": "12.0"
            },
            "resources": [
                {
                    "type": "firewallrules",
                    "apiVersion": "2014-04-01",
                    "dependsOn": [
                        "[variables('sqlserverName')]"
                    ],
                    "location": "[parameters('location')]",
                    "name": "AllowAllWindowsAzureIps",
                    "properties": {
                        "endIpAddress": "255.255.255.255",
                        "startIpAddress": "0.0.0.0"
                    }
                }
            ]
        },
        {
            "apiVersion": "2017-04-01",
            "name": "[variables('namespaceName')]",
            "type": "Microsoft.EventHub/namespaces",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('eventhubSku')]",
                "tier": "[parameters('eventhubSku')]",
                "capacity": "[parameters('skuCapacity')]"
            },
            "tags": {
                "tag1": "value1",
                "tag2": "value2"
            },
            "properties": {
                "zoneRedundant": false,
                "isAutoInflateEnabled": true,
                "maximumThroughputUnits": 2,
                "kafkaEnabled": false
            },
            "resources": [
                {
                    "apiVersion": "2017-04-01",
                    "name": "[parameters('eventHubName')]",
                    "type": "eventhubs",
                    "dependsOn": [
                        "[concat('Microsoft.EventHub/namespaces/', variables('namespaceName'))]"
                    ],
                    "properties": {
                        "messageRetentionInDays": 4,
                        "partitionCount": 2,
                        "status": "Active"
                    },
                    "resources": [
                        {
                            "apiVersion": "2017-04-01",
                            "name": "[parameters('consumerGroupName')]",
                            "type": "consumergroups",
                            "dependsOn": [
                                "[parameters('eventHubName')]"
                            ],
                            "properties": {
                                "userMetadata": "User Metadata goes here"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "apiVersion": "2016-03-01",
            "name": "[variables('hostingPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[parameters('location')]",
            "tags": {
                "displayName": "HostingPlan"
            },
            "sku": {
                "name": "[parameters('skuName')]",
                "capacity": "[parameters('skuCapacity')]"
            },
            "properties": {
                "name": "[variables('hostingPlanName')]"
            }
        },
        {
            "apiVersion": "2016-03-01",
            "name": "[variables('webSiteName')]",
            "type": "Microsoft.Web/sites",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('hostingPlanName')]"
            ],
            "tags": {
                "[concat('hidden-related:', resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName')))]": "empty",
                "displayName": "Website"
            },
            "properties": {
                "name": "[variables('webSiteName')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
            },
            "resources": [
                {
                    "apiVersion": "2016-08-01",
                    "name": "web",
                    "type": "sourcecontrols",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('webSiteName'))]"
                    ],
                    "properties": {
                        "RepoUrl": "[parameters('repoURL')]",
                        "branch": "[parameters('branch')]",
                        "IsManualIntegration": true
                    }
                },
                {
                    "apiVersion": "2016-08-01",
                    "type": "config",
                    "name": "connectionstrings",
                    "dependsOn": [
                       "[resourceId('Microsoft.Web/Sites', variables('webSiteName'))]",
                       "[resourceId('Microsoft.Sql/servers/', variables('sqlserverName'))]",
                       "[concat('Microsoft.Web/Sites/', variables('webSiteName'), '/sourcecontrols/web')]"
                    ],
                    "properties": {
                        "SqlConnection": {
                            "value": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('databaseName'), ';User Id=', parameters('sqlAdministratorLogin'), '@', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ';Password=', parameters('sqlAdministratorLoginPassword'), ';')]",
                            "type": "SQLAzure"
                        }
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Sql/servers/databases",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(parameters('sqlserverName'), '/Movies')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Basic",
                "tier": "Basic",
                "capacity": 5
            },
            "kind": "v12.0,user",
            "properties": {
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "maxSizeBytes": 2147483648,
                "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
                "zoneRedundant": false,
                "readScale": "Disabled",
                "storageAccountType": "GRS"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/advisors",
            "apiVersion": "2014-04-01",
            "name": "[concat(parameters('sqlserverName'), '/Movies/CreateIndex')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlserverName'), 'Movies')]"
            ],
            "properties": {
                "autoExecuteValue": "Disabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/advisors",
            "apiVersion": "2014-04-01",
            "name": "[concat(parameters('sqlserverName'), '/Movies/DbParameterization')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlserverName'), 'Movies')]"
            ],
            "properties": {
                "autoExecuteValue": "Disabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/advisors",
            "apiVersion": "2014-04-01",
            "name": "[concat(parameters('sqlserverName'), '/Movies/DefragmentIndex')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlserverName'), 'Movies')]"
            ],
            "properties": {
                "autoExecuteValue": "Disabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/advisors",
            "apiVersion": "2014-04-01",
            "name": "[concat(parameters('sqlserverName'), '/Movies/DropIndex')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlserverName'), 'Movies')]"
            ],
            "properties": {
                "autoExecuteValue": "Disabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/advisors",
            "apiVersion": "2014-04-01",
            "name": "[concat(parameters('sqlserverName'), '/Movies/ForceLastGoodPlan')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlserverName'), 'Movies')]"
            ],
            "properties": {
                "autoExecuteValue": "Enabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/auditingPolicies",
            "apiVersion": "2014-04-01",
            "name": "[concat(parameters('sqlserverName'), '/Movies/Default')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlserverName'), 'Movies')]"
            ],
            "properties": {
                "auditingState": "Disabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/auditingSettings",
            "apiVersion": "2017-03-01-preview",
            "name": "[concat(parameters('sqlserverName'), '/Movies/Default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlserverName'), 'Movies')]"
            ],
            "properties": {
                "retentionDays": 0,
                "isAzureMonitorTargetEnabled": false,
                "state": "Disabled",
                "storageAccountSubscriptionId": "00000000-0000-0000-0000-000000000000"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/backupLongTermRetentionPolicies",
            "apiVersion": "2017-03-01-preview",
            "name": "[concat(parameters('sqlserverName'), '/Movies/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlserverName'), 'Movies')]"
            ],
            "properties": {
                "weeklyRetention": "PT0S",
                "monthlyRetention": "PT0S",
                "yearlyRetention": "PT0S",
                "weekOfYear": 0
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies",
            "apiVersion": "2020-02-02-preview",
            "name": "[concat(parameters('sqlserverName'), '/Movies/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlserverName'), 'Movies')]"
            ],
            "properties": {
                "retentionDays": 7
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/extendedAuditingSettings",
            "apiVersion": "2017-03-01-preview",
            "name": "[concat(parameters('sqlserverName'), '/Movies/Default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlserverName'), 'Movies')]"
            ],
            "properties": {
                "retentionDays": 0,
                "isAzureMonitorTargetEnabled": false,
                "state": "Disabled",
                "storageAccountSubscriptionId": "00000000-0000-0000-0000-000000000000"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/geoBackupPolicies",
            "apiVersion": "2014-04-01",
            "name": "[concat(parameters('sqlserverName'), '/Movies/Default')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlserverName'), 'Movies')]"
            ],
            "properties": {
                "state": "Enabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/securityAlertPolicies",
            "apiVersion": "2020-02-02-preview",
            "name": "[concat(parameters('sqlserverName'), '/Movies/Default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlserverName'), 'Movies')]"
            ],
            "properties": {
                "state": "Disabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/transparentDataEncryption",
            "apiVersion": "2014-04-01",
            "name": "[concat(parameters('sqlserverName'), '/Movies/current')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlserverName'), 'Movies')]"
            ],
            "properties": {
                "status": "Enabled"
            }
        },
        {
            "type": "Microsoft.Sql/servers/databases/vulnerabilityAssessments",
            "apiVersion": "2017-03-01-preview",
            "name": "[concat(parameters('sqlserverName'), '/Movies/Default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlserverName'), 'Movies')]"
            ],
            "properties": {
                "recurringScans": {
                    "isEnabled": false,
                    "emailSubscriptionAdmins": true
                }
            }
        }
    ],
    "outputs": {
        "siteUri": {
            "type": "string",
            "value": "[reference(concat('Microsoft.Web/sites/', variables('webSiteName'))).hostnames[0]]"
        },
        "sqlSvrFqdn": {
            "type": "string",
            "value": "[reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName]"
        },
        "sqlserverName": {
            "type": "string",
            "value": "[variables('sqlserverName')]"
        }
    }
}